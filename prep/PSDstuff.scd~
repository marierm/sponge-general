PSD_generic_grabber {
	*init { arg nChannels, chan_offset, s;
		var time, level_meter, input_synth, analyse_synth;
		level_meter = List.new(); input_synth = List.new(); analyse_synth =
		List.new();
		~slider_ch = List.new();
		s = s ? Server.default;

		~generic_grabber_window = Window("Generic grabber", Rect(20, 920, 310, (33
			* nChannels) + 10));
		~generic_grabber_window.front;
		~generic_grabber_window.view.decorator =
		FlowLayout(~generic_grabber_window.view.bounds);

		nChannels.do{ arg i;
			analyse_synth.add(Synth.new(\analyse_send_passe_lag, [inbus: 100+i, level:
				1.0, median: 7, pre_lpf: 5000,
				amp_thresh: 0.0, max_freq: 2000, exec_freq: 20, lag_time: 0.3, index:
				100+i, outbus: 20+i], ~analyse));
			input_synth.add(Synth.new(\sound_in, [inbus: i + chan_offset, level: 1.0,
				outbus: 100+i], ~sources));


			~slider_ch.add( EZSlider(~generic_grabber_window, 300@15, "ch " ++
				i.asString, \db,
				{|ez| input_synth[i].set(\level, ez.value.dbamp )}, unitWidth:30, initVal:
				0, initAction: false,
				layout: 'horz').setColors(Color.grey,Color.white,
					Color.grey(0.7),Color.grey, Color.white, Color.yellow);
				level_meter.add(LevelIndicator(~generic_grabber_window, 300@10));
				OSCFunc({arg msg; if((msg[3]) == (100+i), {{level_meter[i].value =
					(msg[6]).ampdb.linlin(-40, 0, 0, 1);}.defer; });
				}, '/analysis', s.addr);
			)};
		~generic_grabber_window.onClose_({
			analyse_synth.collect{ arg i; i.free; };
			input_synth.collect{ arg i; i.free; };
		});
	}
}
