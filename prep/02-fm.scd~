~fmProto = Proto ({
	~relTime = 0.2; // used by ~ampBus to control amp
	~damperCurve = 4;
	~damperMin = 0;
	~damperMax = 900;
	~notes = ([ \en1, \en2, \bn2].keynum.mirror2.clump(3)).flat;
	~numNotes = 6;
	~chords = ([
		~notes.deepCopy,
		[ \en2, \en3, \gn3, \dn4, \fs4, \bn4].keynum,
		[ \en2, \dn3, \fs3, \dn4, \fs4, \bn4].keynum,
		[ \en2, \cn3, \gn3, \dn4, \fs4, \bn4].keynum,
		[ \en2, \bn2, \an3, \dn4, \fs4, \bn4].keynum,

		[ \en2, \en3, \cn4, \dn4, \fs4, \bn4].keynum,
		[ \en2, \dn3, \gn3, \cn4, \fs4, \bn4].keynum,
		[ \en2, \cn3, \gn3, \bn3, \fs4, \bn4].keynum,
		[ \en2, \dn3, \fs3, \bn3, \en4, \an4].keynum
		// [ \en1, \bn1, \cn3, \dn4, \fs4, \bn4].keynum,
	]);

	~octVaList = ~octVaList.deepCopy.addFunc({
		// ~notes = ~notes + 12;
		~chords = ~chords + 12;
		// ~pitcher.set(\base, ~notes);
	});
	~octVbList = ~octVbList.deepCopy.addFunc({
		// ~notes = ~notes - 12;
		~chords = ~chords - 12;
		// ~pitcher.set(\base, ~notes);
	});

	~setChord = { |id|
		~notes = ~chords.clipAt(id);
		~pitcher.set(\base, ~notes);
		~changed.value(\chord, ~notes.note);
	};
	
	// ~notes = [ \en6 ].keynum;
	// ~numNotes = 1;

	~octVa = { ~octVaList.value; };
	~octVb = { ~octVbList.value; };
	~octVaList = ~octVaList.deepCopy.addFunc({
		~notes = ~notes + 12;
		~pitcher.set(\base, ~notes);
		~changed.value(\octave, ~notes[0].noteOctave);
	});
	~octVbList = ~octVbList.deepCopy.addFunc({
		~notes = ~notes - 12;
		~pitcher.set(\base, ~notes);
		~changed.value(\octave, ~notes[0].noteOctave);
	});
	~octTmp = { |oct|
		~pitcher.set(\base, ~notes + (12 * oct));
	};
	~octReset = {
		~pitcher.set(\base, ~notes);
	};

	~initialize = { |sponge, interpPath|
		forkIfNeeded {
			~sponge = sponge;
			~server = sponge.server;
			///////////////////////////
			// Interpolator Stuff	 //
			///////////////////////////
			~interpolatorPath = interpPath;
			~interpolator = PresetInterpolatorServer.newLoad(
				~interpolatorPath
			);
			~server.sync; // May be needed, not sure.
			
			/////////////////////////////
			// Amplitude Control Stuff //
			/////////////////////////////
			// to extract amplitudes from the six accelerometers.
			SynthDef(\ampExtractor, { 
				arg out=0, in = #[0,0,0,0,0,0];
				Out.kr(
					out,
					EnvFollow.kr(in * 0.005, \decayCoef.kr(0.999))
				);
			}).add;
			// to extract une amplitude signal from all accel. combined.
			SynthDef(\globalAmp, {|out=0, inBus=0|
				var amp;
				amp = In.kr(inBus, 6).sum * 0.166667;
				Out.kr(out, amp);
			}).add;

			~ampBus = Bus.control(~server, 6);
			~globalAmpBus = Bus.control(~server, 1);
			~group = Group.tail(~server);

			//////////////////
			// Damper Stuff //
			//////////////////
			~damperBus = Bus.control(~server, 2);
			SynthDef(\damper, {
				arg out=0, min=0, max=900, curve=4;
				var sig;
				sig = [\inA.kr(0), \inB.kr(0)].max;
				Out.kr(
					out,
					[sig, sig].linlin(
						min,max,0.01,1.0
					);
				)
			}).add;
			~damperInA = ~sponge[\fsr1].bus;
			~damperInB = ~sponge[\fsr2].bus;

			///////////////////////////////////////////////////////////////////
			// Pitch stuff													 //
			// 																 //
			// Four controls for the pitch are combined:					 //
			// 1. Base pitch: ~notes (midi keynum)							 //
			// 2. Offset from sponge buttons: ~pitchOsBus (in semitones)	 //
			// 3. Pitch bend: ~pbBus (in semitones)							 //
			// 4. Fine pitch variations from interpolator: ~interpolFreqs	 //
			// 																 //
			//  ~freqBuses hold the resultant.  							 //
			///////////////////////////////////////////////////////////////////
			SynthDef(\pitcher, {
				arg out = 0, bendRange=2;
				var base, offset, bend, interpol, freqs;
				base = NamedControl.kr(\base, ~notes);
				offset = NamedControl.kr(\offset, 0);
				bend = NamedControl.kr(\bend, 0);
				bend = bend.linlin(-pi, pi, bendRange * -1, bendRange); 
				interpol = NamedControl.kr(
					\interpol, [0,0,0,0,0,0]
				) * NamedControl.kr(
					\coefImpactHauteur, 1.0 // adjust the impact of interpolator (for experiment);
				);
				freqs = (base + offset + bend + interpol).midicps;
				ReplaceOut.kr(out, freqs);
			}).add;

			~pitchOsBus = Bus.control(~server, 1);
			~freqBuses = Bus.control(~server, ~notes.size);

			// This stores the index of the \interpol control input.
			// Is there a better way to do this?
			~interpolId = SynthDescLib.global[
				\pitcher
			].controls.collect(_.name).indexOf(\interpol);

			//////////////
			// FM Stuff //
			//////////////
			SynthDef(\fm, {
				arg out = 0, gate=1, att=0.3;
				var ctls, mods, sig, in;
				ctls = Array.fill(6, {|i|
					[
						(\freq++i).asSymbol.kr(220),
						0,
						(\amp++i).asSymbol.kr(1)
					]
				});
				mods = Array.fill2D(6, 6, {|x,y|
					var name;
					name = ("mod" ++ x ++ "_" ++ y).asSymbol;
					NamedControl.kr(name, 0);
				});
				sig = FM7.ar(ctls, mods);
				sig = sig * \amps.kr( 0.1!6 );
				Out.ar(
					out,
					Splay.arFill( ~numNotes, { |i|
						sig[i] * EnvGen.kr(
							Env.asr(att,0.1),gate, doneAction:2
						)
					})				
				);
			}).add;

			~bus = Bus.audio(~server, 2);

		};
	};

	~play = {
		///////////////////////////
		// Interpolator Stuff	 //
		///////////////////////////
		~frozen = false;
		6.do({ |i|
			~interpolator.connect(i, ~sponge.features[i]);
		});

		/////////////////////////////
		// Amplitude Control Stuff //
		/////////////////////////////
		~inputs = [
			\acc1xBP, \acc1yBP, \acc1zBP,
			\acc2xBP, \acc2yBP, \acc2zBP
		].collect({|i| ~sponge[i].bus});

		// ~ampExtractor may still be playing because of the release time.
		~damper.isPlaying.if({
			~ampExtractor.free;
			~damper.free;
		});
		~pitcher.isPlaying.if({
			~pitcher.free;
		});
		~fm.isPlaying.if({
			~fm.free;
		});



		~server.makeBundle(nil, {
			~ampExtractor = Synth.tail(Server.default, \ampExtractor, [
				\out, ~ampBus,
				\decayCoef, 0.9985
			]).map( *
				6.collect({|i| [i+1, ~inputs[i]]}).flat;
			);
			~globalAmp = Synth.after(~ampExtractor, \globalAmp, [
				\out, ~globalAmpBus,
				\inBus, ~ampBus
			]);
			~damper = Synth.after(~ampExtractor, \damper, [
				\out, ~damperBus.index,
				\min, ~damperMin,
				\max, ~damperMax,
				\curve, ~damperCurve
			]).map(
				\inA, ~damperInA,
				\inB, ~damperInB
			);
			~pitcher = Synth.head(~group, \pitcher, [
				\out, ~freqBuses.index,
				\bendRange, 2,
				\base, ~notes,
				\bend, 0
			]).map(
				// \bend, ~sponge[\bend].bus,
				\offset, ~pitchOsBus
			);

			// map freq interpolator to pitcher synth
			// first 6 parameters in interpolator are pitch.
			// We use only the first one.
			// ~pitcher.map( *
			// 	6.collect({|i|
			// 		[~interpolId + i , ~interpolator.cursor.parameters[i].bus]
			// 	}).flat;			
			// );

			~fm = Synth.after(~pitcher, \fm, [
				// \out, ~bus.index,
				\out, 4
				// \amp, 0.1
			]);

			~fm.map( \amps, ~ampBus);
			
			// Map output of pitcher to fm freqs.
			~fm.map( *
				~notes.size.collect({|i|
					[ (\freq ++ i).asSymbol, ~freqBuses.subBus(i) ]
				}).flat;
			);

			// Map interpolator amps to fm amps
			~fm.map( *
				~interpolator.cursor.parameters.select({|i|
					i.name.beginsWith("amp");
				}).collect({|param|
					[param.name.asSymbol, param.bus]
				}).flat;
			);

			// Map interpolator mods to fm mods
			~fm.map( *
				~interpolator.cursor.parameters.select({|i|
					i.name.beginsWith("mod");
				}).collect({ |param|
					[param.name.asSymbol, param.bus]
				}).flat;
			);

			// Why did I do this?
			// It seems to be a duplicate from ~pitcher.map above, but why i*2????
			~pitcher.map( *
				~notes.size.collect({|i|
					[~interpolId + i , ~interpolator.cursor.parameters[i*2].bus]
				}).flat;			
			);
		});
		


		NodeWatcher.register(~ampExtractor);
		NodeWatcher.register(~globalAmp);
		NodeWatcher.register(~damper);
		NodeWatcher.register(~pitcher);
		NodeWatcher.register(~fm);
	};

	~freezeMe = {
		6.do({ |i| ~interpolator.disconnect(i);	});
		~frozen = true;
	};
	
	~unfreezeMe = {
		~frozen.if({
			6.do({ |i|
				~interpolator.connect(i, ~sponge.features[i]);
			});
			~frozen = false;
		});
	};

	~stop = {
		// Release ~fm immediately.
		~fm.isPlaying.if({
			~fm.release(~relTime);
		});
		// Then wait for ~relTime seconds before sending the bundle that
		// frees everything.
		~ampExtractor.isPlaying.if({
			~server.makeBundle(~relTime, {
				6.do({ |i|
					~interpolator.disconnect(i);
					// try { ~interpolator.disconnect(i) };
				});
				~ampExtractor.free;
				~globalAmp.free;
				~damper.free;
			});
		});
		~pitcher.isPlaying.if({
			~server.sendBundle(~relTime, ~pitcher.freeMsg );
		});
	};
	
	~free = {
		~interpolator.free; // Interpolator
		///////////////
		~ampExtractor.free;	// Amplitude extraction
		~globalAmp.free;
		~ampBus.free;
		~globalAmpBus.free;
		~group.free;
		~damperBus.free;
		~pitcher.free;
		~bus.free;
	};
});
